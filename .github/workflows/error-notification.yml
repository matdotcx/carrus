name: Error Notification

on:
  # Run when a job fails
  workflow_run:
    workflows: ["*"]
    types:
      - completed
      
  # Allow manual trigger for testing
  workflow_dispatch:
    inputs:
      job_name:
        description: 'Name of the failed job'
        required: true
      workflow_name:
        description: 'Name of the workflow'
        required: true
      run_url:
        description: 'URL to the workflow run'
        required: true

jobs:
  send-error-notification:
    name: Send Error Notification
    # Only run this job when the triggering workflow failed
    if: ${{ github.event.workflow_run.conclusion == 'failure' || github.event_name == 'workflow_dispatch' }}
    runs-on: macos-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install .
          
      - name: Send error notification
        env:
          CARRUS_NOTIFICATION_ENABLED: "true"
          CARRUS_NOTIFICATION_METHOD: "slack"
          CARRUS_SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          CARRUS_SLACK_CHANNEL: "#build-failures"
          CARRUS_SLACK_USERNAME: "Carrus Error Bot"
          
          # Use inputs for manual dispatch or workflow_run data for automatic
          JOB_NAME: ${{ github.event.inputs.job_name || github.event.workflow_run.name }}
          WORKFLOW_NAME: ${{ github.event.inputs.workflow_name || github.event.workflow_run.workflow.name }}
          RUN_URL: ${{ github.event.inputs.run_url || github.event.workflow_run.html_url }}
        run: |
          python -c "
import asyncio
import datetime
from carrus.core.config import get_default_config
from carrus.core.notifications import NotificationService, Notification
import os

async def send_error_notification():
    # Get configuration with environment variables
    config = get_default_config()
    service = NotificationService(config)
    
    # Get job information
    job_name = os.environ.get('JOB_NAME')
    workflow_name = os.environ.get('WORKFLOW_NAME')
    run_url = os.environ.get('RUN_URL')
    
    # Create error notification
    title = f'Build Failure: {workflow_name}'
    message = f'The job *{job_name}* in workflow *{workflow_name}* has failed. '
    
    if run_url:
        message += f'[View details]({run_url})'
    
    # Create notification
    notification = Notification(
        title=title,
        message=message,
        package_name='CI/CD Pipeline',
        current_version='N/A',
        new_version='N/A',
        timestamp=datetime.datetime.now()
    )
    
    # Send notification
    success = await service.provider.notify(notification)
    if success:
        print(f'Successfully sent error notification for {job_name}')
    else:
        print(f'Failed to send notification')

asyncio.run(send_error_notification())
          "